---
import type { Props } from "@astrojs/starlight/props";
import { useTranslations } from "./utils/translations";

import { Icon } from "@astrojs/starlight/components";

const t = useTranslations(Astro.props.locale);
---

<starlight-menu-button>
  <button
    aria-expanded="false"
    aria-label={t("menuButton.accessibleLabel")}
    aria-controls="starlight__sidebar"
    class="md:hidden btn btn-square btn-primary mr-2"
  >
    <Icon name="bars" class="text-black fill-black" />
  </button>
</starlight-menu-button>

<script>
  class StarlightMenuButton extends HTMLElement {
    btn = this.querySelector("button")!;

    constructor() {
      super();
      // Toggle `aria-expanded` state when a user clicks the button.
      this.btn.addEventListener("click", () => this.toggleExpanded());

      // Close the menu when a user presses the escape key.
      const parentNav = this.closest("nav");
      if (parentNav) {
        parentNav.addEventListener("keyup", (e) => this.closeOnEscape(e));
      }

      // Add event listener to menu items
      const menuItems = this.querySelectorAll(".menu-item");
      menuItems.forEach((item) => {
        item.addEventListener("click", () => {
          // Trigger the focusout event on the button
          this.btn.dispatchEvent(new Event("focusout"));
        });
      });
    }

    setExpanded(expanded: boolean) {
      this.setAttribute("aria-expanded", String(expanded));
      document.body.toggleAttribute("data-mobile-menu-expanded", expanded);
    }

    toggleExpanded() {
      const isCurrentlyExpanded = this.getAttribute("aria-expanded") === "true";
      this.setExpanded(!isCurrentlyExpanded);
    }

    closeOnEscape(e: KeyboardEvent) {
      if (e.code === "Escape") {
        this.setExpanded(false);
        this.btn.click();
      }
    }
  }

  customElements.define("starlight-menu-button", StarlightMenuButton);
</script>

<style>
  button {
    z-index: var(--sl-z-index-navbar);
    padding: 0.5rem;
    background-color: var(--sl-color-white);
    border: 4px solid var(--primary-border-color);
    color: black !important;
    box-shadow: var(--sl-shadow-md);
    cursor: pointer;
  }

  [aria-expanded="true"] button {
    background-color: var(--sl-color-gray-2);
    box-shadow: none;
  }

  :global([data-theme="light"]) button {
    background-color: var(--sl-color-black);
    color: var(--sl-color-white);
  }

  :global([data-theme="light"]) [aria-expanded="true"] button {
    background-color: var(--sl-color-gray-5);
  }
</style>

<style is:global>
  [data-mobile-menu-expanded] {
    overflow: hidden;
  }

  @media (min-width: 50rem) {
    [data-mobile-menu-expanded] {
      overflow: auto;
    }
  }
</style>
